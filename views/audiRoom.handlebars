<!-- Version 3: Only for testing of pause and play. See the actually time different between internet -->


<body style="background-image: url('./clientback.jpg')">

    <h1 style="color:whitesmoke">This is Client page</h1>
    <h2 class='roomID' roomID={{room}}>roomID: {{room}}</h3>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>
    <h3 style="color:whitesmoke">Time diff:-ve, client ahead; +ve, server ahead</h3>
    <div id="info"></div>

    <div class="msgbox"></div>

    <button id="playlistReqBtn">request playlist</button>
    <ul id="playlist">
        <p>you haven't requested yet</p>
    </ul>


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.slim.js"></script>
    {{!-- <script src="audiRoom.js"></script> --}}

    {{!-- setting player  --}}
    <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var v_url = 'T4SimnaiktU';
        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '390',
                width: '640',
                videoId: v_url,
                playerVars: {
                    controls: '1',  ///temp changed..should be'0'
                    disablekb: '1',
                    iv_load_policy: '3',
                    modestbranding: '1',
                    rel: '0',
                },
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }
        

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            yt_status = 'NEW'
            socket.emit('chat message', '{{room}}')
            socket.emit('chat message', 'REQUEST_NOW')
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        var yt_status;
        function onPlayerStateChange(event) {
            yt_status = event.data;
            console.log(event.data)
            if (event.data == YT.PlayerState.PLAYING && !done) {
                // setTimeout(stopVideo, 6000);

                done = true;
            }
            
        }
        function stopVideo() {
            player.stopVideo();
        }
    </script>

    {{!-- Watson: i am not sure what this part does for --}}
    <script>
        var socket = io('/djroom');
        socket.emit('new client', '{{room}}');
        //socket.on('say', (msg)=>{$('h1').html(`<h3 style="color: white">Server say ${msg} </p></h3>`)})

        socket.on('VIDEO', (msg)=> {
            console.log(`I get this video ${msg}`)

            if (msg !==  player.getVideoData()['video_id']){
                player.pauseVideo();
                player.cueVideoById(msg)
                socket.emit('chat message', 'REQUEST_NOW')
            }
            

        });

        //take the message from from when submit are click

        //client connected. find server for song and time

        var start_time;
        var lag;
        var restarted;
        socket.on('chat message', (msg) => {

            if (msg[0] === 'B') {
                //initializing, not going to answer message with new if playing
                console.log(`msg ${msg}, yt: ${yt_status}`)
                if (msg.includes('NEW')){
                    if(yt_status !== 'NEW'){ return }
                }
                    console.log ("REREQEST SUCCESSFUL")
                    restarted = true;
                    lag = (Date.now() - msg.substring(msg.indexOf('D') + 1, -3)) / 1000
                    console.log(lag)
                    msg = msg.substring(1, msg.indexOf('D') - 1)
                    $(`<div style="display: none;"><p style="color: white">LAG reduction: ${lag}sec</p></div>`).appendTo($('.msgbox')).show(300);
                    


                    //make player ready on the next 5s interval, min wait 5sec
                    start_time = parseFloat(msg) + 3;
                    player.stopVideo()
                    console.log ("REREQEST SUCCESSFUL2")
                    player.seekTo(parseFloat(start_time), false)
                    player.pauseVideo()
                
            } else if (msg === 'STOP') {
                player.pauseVideo()
            }

        })

        //chk_time is the aheading time emitted by server every second
        var chk_time;
        socket.on('CHECKING', (msg) => {
            console.log(msg)
            chk_time = parseFloat(msg)
        })
        var lag_before;
        var lagdiff;
        socket.on('FIRE', (msg) => {
            if (yt_status < 1) {
                lag = (Date.now() - msg.substring(msg.indexOf('D') + 1, msg.length)) / 1000
                msg = msg.substring(0, msg.indexOf('D') - 1)

                console.log(`time:${msg} lag: ${lag} lag_before: ${lagdiff}`)
                lagdiff = Math.abs(lag_before -lag)
                if ( lagdiff < 0.05){
                    console.log('small lag!!!', restarted)
                     if(Math.abs(start_time -lag - lagdiff - msg) < 0.3) {
                    $(`<div style="display: none;"><p style="color: white">PLAY!</p></div>`).appendTo($('.msgbox')).show(300);
                    //fine tune loading diff in computer 150ms
                    setTimeout(()=>{ player.playVideo();},100)
                    
                    //player.playVideo();
                    restarted = false;
                     }else if(player.getCurrentTime() < msg && restarted){
                        
                        player.pauseVideo();
                        socket.emit('chat message', 'REREQUEST')
                        console.log('EMITTED')
                        restarted = false;

                     }
                }
            }
            lag_before = lag;

        })


        setInterval(() => {
            $('#info').html(`<h3 style="color: white">currentTime ${player.getCurrentTime()} time difference: ${chk_time - player.getCurrentTime() + lag} </p></h3>`)
        }, 1000)


    </script>

    {{!-- request playlist of the room --}}
    <script>
    function tplawesome(e, t) {res = e; for (var n = 0; n < t.length; n++) {res = res.replace(/\{\{(.*?)\}\}/g, function (e, r) {return t[n][r]})}return res}


	 $('#playlistReqBtn').on('click', function(){
		console.log('playlistReqBtn is clicked, refreshing playlist\'s html for new data')
        $('#playlist').html('')
		var roomID = $(this).parent().find('.roomID').attr('roomID')
		if (roomID) console.log(`Properly received roomID: ${roomID}. With the ID, requesting playlist from DB`)
		socket.emit('audiReqPlaylist', roomID)
        $('#playlistReqBtn').hide()
	}) 

    $('#playlistReqBtn').click()
    

	socket.on('addSongToPlaylist', (song)=>{
         var title = song.YT_title.slice(0, 12) // shorten title for logging 
        if (song.YT_video_id && song.YT_title && song.YT_video_thumbnailurl && song.YT_video_duration) {
            console.log(`audi received ${title}'s id, title, thumbnailurl and duration`)
        }
		$.get("../partial-html/videos-on-playlist.html", function(template){
			$("#playlist").append(tplawesome(
				template, [{
					"title": song.YT_title,
					"videoID": song.YT_video_id,
					"duration": song.YT_video_duration,
                    "thumbnailUrl": song.YT_video_thumbnailurl,
				}]
			))
		}).then(()=>{
			console.log(`${title}... is added into the playlist`)
		})
	})
    </script>

</body>

